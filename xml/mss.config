# Self Signed (note the addition of -x509):
#     openssl req -config mss.config -new -x509 -sha256 -newkey rsa:2048 -nodes -keyout mss.key.pem -days 365 -out mss.cert.pem
# Signing Request (note the lack of -x509):
#     openssl req -config mss.config -new -newkey rsa:2048 -nodes -keyout mss.key.pem -days 365 -out mss.req.pem
# Print it:
#     openssl x509 -in mss.cert.pem -text > mss.cert.info
#     openssl x509 -in mss.cert.pem -text -noout
#     openssl req -in mss.req.pem -text -noout

[ req ]
default_bits        = 2048
default_keyfile     = mss-key.pem
distinguished_name  = subject
req_extensions      = req_ext
x509_extensions     = x509_ext
string_mask         = utf8only

# The Subject DN can be formed using X501 or RFC 4514 (see RFC 4519 for a description).
#   It's sort of a mashup. For example, RFC 4514 does not provide emailAddress.
[ subject ]
countryName         = Country Name (2 letter code)
countryName_default = US

stateOrProvinceName     = State or Province Name (full name)
stateOrProvinceName_default = WA

localityName            = Locality Name (eg, city)
localityName_default    = Richland

organizationName         = Organization Name (eg, company)
organizationName_default = Pacific Northwest National Laboratory

# Use a friendly name here because it's presented to the user. The server's DNS
#   names are placed in Subject Alternate Names. Plus, DNS names here is deprecated
#   by both IETF and CA/Browser Forums. If you place a DNS name here, then you 
#   must include the DNS name in the SAN too (otherwise, Chrome and others that
#   strictly follow the CA/Browser Baseline Requirements will fail).
commonName          = Common Name (e.g. server FQDN or YOUR name)
commonName_default  = 127.0.0.1

emailAddress            = Email Address
emailAddress_default    = carl.miller@pnnl.gov

# Section x509_ext is used when generating a self-signed certificate. I.e., openssl req -x509 ...
[ x509_ext ]

subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid,issuer

#  If RSA Key Transport bothers you, then remove keyEncipherment. TLS 1.3 is removing RSA
#  Key Transport in favor of exchanges with Forward Secrecy, like DHE and ECDHE.
basicConstraints    = CA:TRUE
keyUsage            = critical, digitalSignature, keyAgreement
subjectAltName      = @alternate_names
nsComment           = "OpenSSL Generated Certificate"

# RFC 5280, Section 4.2.1.12 makes EKU optional
# CA/Browser Baseline Requirements, Appendix (B)(3)(G) makes me confused
# extendedKeyUsage  = serverAuth, clientAuth

# Section req_ext is used when generating a certificate signing request. I.e., openssl req ...
[ req_ext ]

subjectKeyIdentifier = hash

basicConstraints    = CA:TRUE
keyUsage            = critical, digitalSignature, keyAgreement
subjectAltName      = @alternate_names
nsComment           = "OpenSSL Generated Certificate"

# RFC 5280, Section 4.2.1.12 makes EKU optional
# CA/Browser Baseline Requirements, Appendix (B)(3)(G) makes me confused
# extendedKeyUsage  = serverAuth, clientAuth

[ alternate_names ]

DNS.1       = pnl.gov
DNS.2       = *.pnl.gov
DNS.3       = pnnl.gov
DNS.4       = *.pnnl.gov

# Add these if you need them. But usually you don't want them or
#   need them in production. You may need them for development.
DNS.5       = localhost
DNS.6       = localhost.localdomain
DNS.7       = 127.0.0.1

# IPv6 localhost
DNS.8     = ::1
DNS.9     = fe80::1

# IPv4 localhost
IP.1       = 127.0.0.1

# IPv6 localhost
IP.2     = ::1
